#!/usr/bin/env python3
"""
Exemplo de uso do CSV Analysis AI
Este script demonstra como usar a aplica√ß√£o programaticamente
"""

import pandas as pd
import sys
import os

# Adicionar o diret√≥rio pai ao path para importar os m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from chat_ai_enhanced import EnhancedChatAI
from analysis_memory import analysis_memory
from crewai_enhanced import get_crewai_instance

def exemplo_basico():
    """Exemplo b√°sico de uso da aplica√ß√£o"""
    print("üöÄ Exemplo B√°sico - CSV Analysis AI")
    print("=" * 50)
    
    # 1. Carregar dados de exemplo
    print("üìä Carregando dados de exemplo...")
    df = pd.read_csv("examples/data/sample_data.csv")
    print(f"‚úÖ Dados carregados: {len(df)} registros, {len(df.columns)} colunas")
    
    # 2. Configurar chat AI (simula√ß√£o - sem API key real)
    print("\nü§ñ Configurando Chat AI...")
    try:
        # Em um ambiente real, voc√™ configuraria com uma API key v√°lida
        chat_ai = EnhancedChatAI("OpenAI", "sua-api-key-aqui")
        print("‚úÖ Chat AI configurado")
    except Exception as e:
        print(f"‚ö†Ô∏è Chat AI n√£o configurado: {e}")
        return
    
    # 3. Fazer perguntas sobre os dados
    print("\nüí¨ Fazendo perguntas sobre os dados...")
    perguntas = [
        "Quantos funcion√°rios temos no total?",
        "Qual √© a m√©dia salarial por departamento?",
        "Quais s√£o os funcion√°rios com melhor performance?",
        "H√° alguma correla√ß√£o entre experi√™ncia e sal√°rio?"
    ]
    
    for pergunta in perguntas:
        print(f"\n‚ùì Pergunta: {pergunta}")
        try:
            resposta = chat_ai.generate_enhanced_response(pergunta, df)
            if isinstance(resposta, tuple):
                texto, grafico = resposta
                print(f"ü§ñ Resposta: {texto[:200]}...")
                print(f"üìä Gr√°fico gerado: {grafico is not None}")
            else:
                print(f"ü§ñ Resposta: {resposta[:200]}...")
        except Exception as e:
            print(f"‚ùå Erro: {e}")

def exemplo_crewai():
    """Exemplo de uso dos agentes CrewAI"""
    print("\n\nü§ñ Exemplo CrewAI - An√°lise com Agentes")
    print("=" * 50)
    
    # 1. Carregar dados
    df = pd.read_csv("examples/data/sample_data.csv")
    print(f"üìä Dados carregados: {len(df)} registros")
    
    # 2. Executar an√°lise CrewAI (simula√ß√£o)
    print("\nüîç Executando an√°lise CrewAI...")
    try:
        crewai_instance = get_crewai_instance()
        # Em um ambiente real, voc√™ executaria:
        # results = crewai_instance.run_analysis("An√°lise de Funcion√°rios", "OpenAI", "sua-api-key")
        print("‚úÖ An√°lise CrewAI executada (simula√ß√£o)")
        
        # 3. Verificar resultados
        print("\nüìã Verificando resultados...")
        analysis_history = analysis_memory.get_analysis_history()
        print(f"üìä An√°lises dispon√≠veis: {len(analysis_history)}")
        
        if analysis_history:
            for analysis_id, analysis_data in analysis_history.items():
                print(f"  - {analysis_data.get('analysis_name', 'N/A')} ({analysis_data.get('status', 'N/A')})")
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise CrewAI: {e}")

def exemplo_relatorios():
    """Exemplo de gera√ß√£o de relat√≥rios"""
    print("\n\nüìÑ Exemplo Relat√≥rios")
    print("=" * 50)
    
    # 1. Carregar dados
    df = pd.read_csv("examples/data/sample_data.csv")
    
    # 2. Gerar relat√≥rio Markdown
    print("üìù Gerando relat√≥rio Markdown...")
    try:
        from Relatorios_appCSV.report_generator import generate_markdown_report
        
        # Dados de exemplo para o relat√≥rio
        conversation_data = {
            'messages': [
                {
                    'timestamp': '2025-09-29T20:00:00',
                    'user_message': 'Quantos funcion√°rios temos?',
                    'ai_response': f'O dataset possui {len(df)} funcion√°rios.',
                    'has_chart': False
                }
            ]
        }
        
        overview_data = {
            'data_quality': 100.0,
            'numeric_columns': len(df.select_dtypes(include=['number']).columns),
            'categorical_columns': len(df.select_dtypes(include=['object']).columns),
            'insights': [
                f"Dataset com {len(df)} registros e {len(df.columns)} colunas",
                "Dados completos sem valores ausentes",
                "Boa distribui√ß√£o entre departamentos"
            ]
        }
        
        markdown_data = generate_markdown_report(
            df, 
            "An√°lise de Funcion√°rios", 
            "An√°lise de dados de funcion√°rios da empresa",
            None,  # analysis_results
            conversation_data,
            overview_data,
            None   # crewai_conclusions
        )
        
        print(f"‚úÖ Relat√≥rio Markdown gerado: {len(markdown_data)} bytes")
        
        # Salvar relat√≥rio
        with open("exemplo_relatorio.md", "wb") as f:
            f.write(markdown_data)
        print("üíæ Relat√≥rio salvo como 'exemplo_relatorio.md'")
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üéØ CSV Analysis AI - Exemplos de Uso")
    print("=" * 60)
    
    try:
        # Executar exemplos
        exemplo_basico()
        exemplo_crewai()
        exemplo_relatorios()
        
        print("\n\n‚úÖ Todos os exemplos executados com sucesso!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Configure uma API key v√°lida")
        print("2. Execute: streamlit run csv_analysis_app_v2.py")
        print("3. Carregue seus pr√≥prios dados CSV")
        print("4. Explore as funcionalidades da aplica√ß√£o")
        
    except Exception as e:
        print(f"\n‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
