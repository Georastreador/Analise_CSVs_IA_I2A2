# Sistema de An√°lise CSV com IA - Vers√£o Minimalista
# Layout estilo Apple com SHADCN

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.ensemble import IsolationForest
from scipy import stats
import json
import time
from datetime import datetime
import io
import base64
import os
import uuid

# Importa√ß√µes para chat e UI moderna
from streamlit_chat import message
from streamlit_option_menu import option_menu

# Importa√ß√µes para teste de API
try:
    from openai import OpenAI
except ImportError:
    OpenAI = None

try:
    from groq import Groq
except ImportError:
    Groq = None

try:
    import google.generativeai as genai
except ImportError:
    genai = None

try:
    from anthropic import Anthropic
except ImportError:
    Anthropic = None

try:
    import requests
    # Perplexity n√£o tem biblioteca oficial, usaremos requests
    Perplexity = "requests_available"
except ImportError:
    Perplexity = None

# Importar nova arquitetura
from data_manager import data_manager
from chat_ai_enhanced import EnhancedChatAI
from crewai_enhanced import get_crewai_instance
from cache_system import cache_system

# Importar gerador de relat√≥rios
from Relatorios_appCSV.report_generator import ReportGenerator, generate_pdf_report, generate_markdown_report

# Importar visualiza√ß√µes avan√ßadas
from visualization_enhanced import show_enhanced_visualizations, generate_visualization_insights

# =============================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA - ESTILO APPLE
# =============================================================================

st.set_page_config(
    page_title="CSV Analysis AI",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado estilo Apple
st.markdown("""
<style>
    /* Reset e base */
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
        max-width: 1200px;
    }
    
    /* Header minimalista */
    .header-container {
        text-align: center;
        margin-bottom: 3rem;
        padding: 2rem 0;
        border-bottom: 1px solid #2C5F5D;
        background: linear-gradient(135deg, #2C5F5D 0%, #4A7C7A 100%);
        border-radius: 12px;
        color: white;
    }
    
    .header-title {
        font-size: 2.5rem;
        font-weight: 600;
        color: white;
        margin: 0;
        letter-spacing: -0.02em;
    }
    
    .header-subtitle {
        font-size: 1.1rem;
        color: #E8F4F3;
        margin-top: 0.5rem;
        font-weight: 400;
    }
    
    /* Chat container estilo ChatGPT */
    .chat-container {
        background: transparent;
        border-radius: 12px;
        border: none;
        padding: 0;
        margin: 0;
        box-shadow: none;
    }
    
    /* Linha elegante abaixo do t√≠tulo do chat */
    .chat-title-divider {
        height: 1px;
        background: linear-gradient(90deg, transparent 0%, #e5e5e7 20%, #e5e5e7 80%, transparent 100%);
        margin: 1rem 0 2rem 0;
        border: none;
    }
    
    /* Bot√µes estilo Apple */
    .stButton > button {
        background: #2C5F5D;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }
    
    .stButton > button:hover {
        background: #1A4A48;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(44, 95, 93, 0.3);
    }
    
    /* Sidebar minimalista */
    .css-1d391kg {
        background: #f5f5f7;
    }
    
    /* Reduzir espa√ßamentos na sidebar */
    .css-1d391kg .stMarkdown {
        margin-bottom: 0.5rem;
    }
    
    .css-1d391kg .stSelectbox,
    .css-1d391kg .stTextInput,
    .css-1d391kg .stButton {
        margin-bottom: 0.5rem;
    }
    
    .css-1d391kg .stDivider {
        margin: 0.5rem 0;
    }
    
    .css-1d391kg h3 {
        margin-bottom: 0.5rem;
    }
    
    /* Cards de informa√ß√£o */
    .info-card {
        background: linear-gradient(135deg, #2C5F5D 0%, #4A7C7A 100%);
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1rem 0;
        border: 1px solid #2C5F5D;
        box-shadow: 0 4px 12px rgba(44, 95, 93, 0.3);
        color: white;
    }
    
    .info-card h3 {
        color: white;
        font-weight: 600;
    }
    
    .info-card p, .info-card li {
        color: #E8F4F3;
    }
    
    .info-card strong {
        color: white;
        font-weight: 600;
    }
    
    /* Status indicators */
    .status-success {
        color: #30d158;
        font-weight: 500;
    }
    
    .status-error {
        color: #ff3b30;
        font-weight: 500;
    }
    
    .status-warning {
        color: #ff9500;
        font-weight: 500;
    }
    
    /* Typography */
    h1, h2, h3 {
        color: #1d1d1f;
        font-weight: 600;
        letter-spacing: -0.01em;
    }
    
    /* Hide Streamlit branding */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
</style>
""", unsafe_allow_html=True)

# =============================================================================
# FUN√á√ïES AUXILIARES
# =============================================================================

def load_csv_data(uploaded_files):
    """Carrega dados CSV dos arquivos enviados usando o DataManager"""
    return data_manager.load_csv(uploaded_files)


def save_conversation_to_json(conversation_data):
    """Salva a conversa√ß√£o em formato JSON"""
    try:
        # Criar estrutura da conversa√ß√£o
        conversation = {
            "metadata": {
                "timestamp": datetime.now().isoformat(),
                "session_id": str(uuid.uuid4()),
                "total_messages": len(conversation_data.get('messages', [])),
                "analysis_id": conversation_data.get('analysis_id'),
                "csv_file": conversation_data.get('csv_file')
            },
            "conversation": conversation_data.get('messages', []),
            "analysis_results": conversation_data.get('analysis_results', {})
        }
        
        # Converter para JSON
        json_data = json.dumps(conversation, indent=2, ensure_ascii=False)
        return json_data
    except Exception as e:
        st.error(f"Erro ao salvar conversa√ß√£o: {str(e)}")
        return None

def download_json_file(json_data, filename):
    """Cria um bot√£o de download para arquivo JSON"""
    if json_data:
        # Codificar em base64
        b64 = base64.b64encode(json_data.encode('utf-8')).decode()
        
        # Criar link de download
        href = f'<a href="data:application/json;base64,{b64}" download="{filename}">üì• Baixar {filename}</a>'
        st.markdown(href, unsafe_allow_html=True)

def show_suggestions():
    """Mostrar sugest√µes de perguntas"""
    st.markdown("""
    <div class="suggestions-container">
        <h4>üí° Sugest√µes de Perguntas:</h4>
        <ul>
            <li>Quais s√£o os tipos de dados das colunas?</li>
            <li>Quantos registros existem no dataset?</li>
            <li>Quais colunas t√™m valores ausentes?</li>
            <li>Mostre a distribui√ß√£o da coluna [nome_da_coluna]</li>
            <li>Quais s√£o os valores √∫nicos em [coluna_categ√≥rica]?</li>
            <li>Calcule estat√≠sticas descritivas das colunas num√©ricas</li>
            <li>Identifique poss√≠veis outliers nos dados</li>
            <li>Mostre a correla√ß√£o entre vari√°veis num√©ricas</li>
            <li>Qual √© a tend√™ncia temporal dos dados?</li>
            <li>Resuma os principais insights dos dados</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

def show_simple_chat_interface(df):
    """Interface do chat simplificado"""
    st.markdown("### üí¨ Chat com IA")
    st.markdown('<hr class="chat-title-divider">', unsafe_allow_html=True)
    
    # Bot√£o para executar an√°lise CrewAI
    col1, col2 = st.columns([2, 1])
    with col1:
        if st.button("üöÄ Executar An√°lise CrewAI", use_container_width=True):
            # Obter credenciais da sidebar
            api_provider = st.session_state.get('api_provider', 'OpenAI')
            api_key = st.session_state.get('api_key', '')
            
            if not api_key:
                st.error("‚ùå Configure uma API key na sidebar primeiro!")
                return
                
            with st.spinner("Executando an√°lise com agentes CrewAI..."):
                # Debug: verificar se a chave est√° sendo passada
                st.write(f"üîç Debug: Provedor: {api_provider}, Chave: {api_key[:10]}...")
                
                # Criar nova inst√¢ncia do CrewAI
                crewai_instance = get_crewai_instance()
                results = crewai_instance.run_analysis("An√°lise CrewAI", api_provider, api_key)
                if results:
                    st.success("‚úÖ An√°lise CrewAI conclu√≠da!")
                    st.info("Agora voc√™ pode fazer perguntas sobre os insights dos agentes.")
    
    with col2:
        # Mostrar status da API
        api_provider = st.session_state.get('api_provider', 'OpenAI')
        api_key = st.session_state.get('api_key', '')
        if api_key:
            st.success(f"‚úÖ {api_provider} configurado")
        else:
            st.warning("‚ö†Ô∏è API n√£o configurada")
    
    # Mostrar sugest√µes
    show_suggestions()
    
    # Inicializar conversa√ß√£o no session_state se n√£o existir
    if 'conversation' not in st.session_state:
        st.session_state.conversation = []
    
    # Input do usu√°rio
    user_message = st.text_input("Digite sua pergunta:", placeholder="Ex: Quais s√£o os tipos de dados das colunas?")
    
    if user_message:
        # Obter credenciais da sidebar
        api_provider = st.session_state.get('api_provider', 'OpenAI')
        api_key = st.session_state.get('api_key', '')
        
        if not api_key:
            st.error("‚ùå Configure uma API key na sidebar primeiro!")
            return
        
        # Gerar resposta usando EnhancedChatAI
        chat_ai = EnhancedChatAI(api_provider, api_key)
        response = chat_ai.generate_enhanced_response(user_message, df)
        
        # Mostrar resposta (response √© uma tupla: (texto, gr√°fico))
        st.markdown("#### ü§ñ Resposta:")
        if isinstance(response, tuple):
            response_text, chart = response
            st.write(response_text)
            
            # Mostrar gr√°fico se houver
            if chart:
                st.plotly_chart(chart, use_container_width=True)
        else:
            st.write(response)
        
        # Salvar na conversa√ß√£o
        st.session_state.conversation.append({
            "timestamp": datetime.now().isoformat(),
            "user_message": user_message,
            "ai_response": response_text if isinstance(response, tuple) else response,
            "has_chart": chart is not None if isinstance(response, tuple) else False
        })
    
    # Bot√£o para download da conversa√ß√£o em JSON
    if st.session_state.conversation:
        st.markdown("---")
        st.markdown("### üì• Download da Conversa√ß√£o")
        
        # Preparar dados da conversa√ß√£o
        conversation_data = {
            "messages": st.session_state.conversation,
            "analysis_id": st.session_state.get('current_analysis_id'),
            "csv_file": st.session_state.get('current_csv_file', 'unknown'),
            "analysis_results": {}
        }
        
        # Adicionar resultados da an√°lise se dispon√≠vel
        from analysis_memory import analysis_memory
        if analysis_memory.current_analysis:
            results = analysis_memory.get_analysis_results(analysis_memory.current_analysis)
            if results:
                conversation_data["analysis_results"] = results
        
        # Gerar JSON
        json_data = save_conversation_to_json(conversation_data)
        
        if json_data:
            # Nome do arquivo com timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"conversacao_analise_{timestamp}.json"
            
            # Bot√£o de download
            download_json_file(json_data, filename)
            
            # Mostrar estat√≠sticas da conversa√ß√£o
            st.info(f"üí¨ Conversa√ß√£o com {len(st.session_state.conversation)} mensagens")
            
            # Bot√£o para limpar conversa√ß√£o
            if st.button("üóëÔ∏è Limpar Conversa√ß√£o"):
                st.session_state.conversation = []
                st.rerun()

def show_conclusions_interface():
    """Interface para mostrar conclus√µes dos agentes CrewAI"""
    from analysis_memory import analysis_memory
    
    # Verificar se h√° an√°lises dispon√≠veis
    analysis_history = analysis_memory.get_analysis_history()
    
    if not analysis_history:
        st.info("üìã Nenhuma an√°lise CrewAI dispon√≠vel. Execute uma an√°lise primeiro.")
        return
    
    # Converter dicion√°rio para lista de an√°lises
    analyses_list = []
    for analysis_id, analysis_data in analysis_history.items():
        analyses_list.append({
            'id': analysis_id,
            'name': analysis_data.get('analysis_name', f'An√°lise {analysis_id[:8]}'),
            'date': analysis_data.get('timestamp', 'Data n√£o dispon√≠vel'),
            'status': analysis_data.get('status', 'unknown')
        })
    
    # Selecionar an√°lise
    analysis_names = [analysis['name'] for analysis in analyses_list]
    selected_analysis_name = st.selectbox("Selecione uma an√°lise:", analysis_names)
    
    if selected_analysis_name:
        # Encontrar a an√°lise selecionada
        selected_analysis = None
        for analysis in analyses_list:
            if analysis['name'] == selected_analysis_name:
                selected_analysis = analysis
                break
        
        if selected_analysis:
            analysis_id = selected_analysis['id']
            results = analysis_memory.get_analysis_results(analysis_id)
            
            if results and 'crew_results' in results:
                st.markdown(f"### üìä Resultados da An√°lise: {selected_analysis_name}")
                st.markdown(f"**Data:** {selected_analysis['date']}")
                
                # Mostrar resultados dos agentes
                crew_results = results['crew_results']
                
                for agent_key, agent_result in crew_results.items():
                    # Mapear chaves dos agentes para nomes amig√°veis
                    agent_names = {
                        'data_validator': 'Data Validator',
                        'data_profiler': 'Data Profiler', 
                        'pattern_detective': 'Pattern Detective',
                        'anomaly_hunter': 'Anomaly Hunter',
                        'relationship_analyst': 'Relationship Analyst',
                        'strategic_synthesizer': 'Strategic Synthesizer'
                    }
                    
                    agent_name = agent_names.get(agent_key, agent_key.replace('_', ' ').title())
                    
                    with st.expander(f"ü§ñ {agent_name}", expanded=True):
                        if isinstance(agent_result, dict) and 'output' in agent_result:
                            st.markdown("**Resultado Completo:**")
                            st.write(agent_result['output'])
                        else:
                            st.markdown("**Resultado:**")
                            st.write(agent_result)
            else:
                st.warning("‚ö†Ô∏è Nenhum resultado encontrado para esta an√°lise.")
        else:
            st.warning("‚ö†Ô∏è An√°lise selecionada n√£o encontrada.")

def show_minimal_overview(df):
    """Overview minimalista dos dados"""
    if df is None:
        st.info("üìÅ Carregue um arquivo CSV para ver a vis√£o geral")
        return
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìä Registros", f"{len(df):,}")
    
    with col2:
        st.metric("üìã Colunas", f"{len(df.columns)}")
    
    with col3:
        missing = df.isnull().sum().sum()
        st.metric("‚ö†Ô∏è Valores Faltantes", f"{missing:,}")
    
    with col4:
        duplicates = df.duplicated().sum()
        st.metric("üîÑ Duplicatas", f"{duplicates:,}")
    
    # Tipos de dados - Gr√°fico maior
    st.subheader("üìà Distribui√ß√£o dos Tipos de Dados")
    dtype_counts = df.dtypes.value_counts()
    fig = px.pie(
        values=dtype_counts.values,
        names=[str(dtype) for dtype in dtype_counts.index],
        title="Distribui√ß√£o dos Tipos de Dados",
        color_discrete_sequence=px.colors.qualitative.Set3
    )
    fig.update_layout(
        showlegend=True, 
        height=500,
        title_font_size=16,
        font_size=12
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # Dados de Perfilamento
    st.subheader("üîç Perfilamento dos Dados")
    
    # An√°lise de correla√ß√£o
    numeric_cols = df.select_dtypes(include=['number']).columns
    if len(numeric_cols) >= 2:
        st.markdown("**üìä Matriz de Correla√ß√£o**")
        corr_matrix = df[numeric_cols].corr()
        
        # Criar heatmap de correla√ß√£o
        fig_corr = px.imshow(
            corr_matrix,
            text_auto=True,
            aspect="auto",
            color_continuous_scale="RdBu_r",
            title="Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas"
        )
        fig_corr.update_layout(height=500)
        st.plotly_chart(fig_corr, use_container_width=True)
    
    # Estat√≠sticas por tipo de coluna
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä Colunas Num√©ricas**")
        if len(numeric_cols) > 0:
            for col in numeric_cols[:5]:  # Mostrar at√© 5 colunas
                stats = df[col].describe()
                st.write(f"**{col}**:")
                st.write(f"  - M√©dia: {stats['mean']:.2f}")
                st.write(f"  - Mediana: {stats['50%']:.2f}")
                st.write(f"  - Desvio Padr√£o: {stats['std']:.2f}")
                st.write(f"  - Min: {stats['min']:.2f} | Max: {stats['max']:.2f}")
                st.write("")
        else:
            st.info("Nenhuma coluna num√©rica encontrada")
    
    with col2:
        st.markdown("**üìã Colunas Categ√≥ricas**")
        categorical_cols = df.select_dtypes(include=['object']).columns
        if len(categorical_cols) > 0:
            for col in categorical_cols[:5]:  # Mostrar at√© 5 colunas
                unique_count = df[col].nunique()
                most_common = df[col].mode().iloc[0] if len(df[col].mode()) > 0 else "N/A"
                st.write(f"**{col}**:")
                st.write(f"  - Valores √∫nicos: {unique_count}")
                st.write(f"  - Mais comum: {most_common}")
                st.write(f"  - Valores faltantes: {df[col].isnull().sum()}")
                st.write("")
        else:
            st.info("Nenhuma coluna categ√≥rica encontrada")
    
    # Qualidade dos dados
    st.subheader("üìã Qualidade dos Dados")
    quality_col1, quality_col2, quality_col3 = st.columns(3)
    
    with quality_col1:
        st.metric("‚úÖ Completude", f"{((len(df) - df.isnull().sum().sum()) / (len(df) * len(df.columns)) * 100):.1f}%")
    
    with quality_col2:
        st.metric("üîÑ Unicidade", f"{((len(df) - df.duplicated().sum()) / len(df) * 100):.1f}%")
    
    with quality_col3:
        numeric_ratio = len(numeric_cols) / len(df.columns) * 100
        st.metric("üìä % Num√©ricas", f"{numeric_ratio:.1f}%")

def show_sidebar():
    """Sidebar minimalista"""
    with st.sidebar:
        st.markdown("### ‚öôÔ∏è Configura√ß√µes")
        
        # API Selection
        api_provider = st.selectbox(
            "üîë Provedor de IA",
            ["OpenAI", "GROQ", "Gemini", "Claude", "Perplexity"],
            help="Selecione qual API de IA usar"
        )
        
        # Salvar no session_state
        st.session_state['api_provider'] = api_provider
        
        # API Key
        api_key = st.text_input(
            f"Chave da API {api_provider}:",
            type="password",
            help="Insira sua chave de API"
        )
        
        # Salvar no session_state
        st.session_state['api_key'] = api_key
        
        # Test API Button
        if st.button("üß™ Testar API", use_container_width=True):
            if api_key:
                with st.spinner("Testando..."):
                    try:
                        if api_provider == "OpenAI" and OpenAI:
                            client = OpenAI(api_key=api_key)
                            models = client.models.list()
                            st.success("‚úÖ API funcionando!")
                        elif api_provider == "GROQ" and Groq:
                            client = Groq(api_key=api_key)
                            models = client.models.list()
                            st.success("‚úÖ API funcionando!")
                        elif api_provider == "Gemini" and genai:
                            genai.configure(api_key=api_key)
                            model = genai.GenerativeModel('gemini-2.5-flash-lite-preview-09-2025')
                            response = model.generate_content("Teste de conex√£o")
                            st.success("‚úÖ API funcionando!")
                        elif api_provider == "Claude" and Anthropic:
                            client = Anthropic(api_key=api_key)
                            response = client.messages.create(
                                model="claude-3-sonnet-20240229",
                                max_tokens=10,
                                messages=[{"role": "user", "content": "Teste"}]
                            )
                            st.success("‚úÖ API funcionando!")
                        elif api_provider == "Perplexity" and Perplexity:
                            import requests
                            headers = {
                                "Authorization": f"Bearer {api_key}",
                                "Content-Type": "application/json"
                            }
                            data = {
                                "model": "llama-3.1-sonar-small-128k-online",
                                "messages": [{"role": "user", "content": "Teste"}],
                                "max_tokens": 10
                            }
                            response = requests.post(
                                "https://api.perplexity.ai/chat/completions",
                                headers=headers,
                                json=data
                            )
                            if response.status_code == 200:
                                st.success("‚úÖ API funcionando!")
                            else:
                                st.error(f"‚ùå Erro: {response.status_code}")
                        else:
                            st.info("‚ÑπÔ∏è Biblioteca n√£o instalada ou API n√£o suportada")
                    except Exception as e:
                        st.error(f"‚ùå Erro: {str(e)}")
            else:
                st.error("‚ùå Insira uma chave de API")
        
        # File Upload
        st.markdown("### üìÅ Arquivos")
        uploaded_files = st.file_uploader(
            "Carregar CSV",
            type=['csv'],
            accept_multiple_files=True,
            help="Selecione arquivos CSV para an√°lise"
        )
        
        if uploaded_files:
            st.success(f"‚úÖ {len(uploaded_files)} arquivo(s) carregado(s)")
        
        # Analysis Info
        st.markdown("### üè∑Ô∏è An√°lise")
        analysis_name = st.text_input(
            "Nome da an√°lise:",
            value=f"An√°lise - {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        )
        
        # Cache Management
        st.markdown("### üóÑÔ∏è Cache")
        if st.button("üßπ Limpar Cache", use_container_width=True):
            cache_system.clear_all()
        
        # Mostrar estat√≠sticas do cache
        cache_stats = cache_system.get_cache_stats()
        if cache_stats['total_items'] > 0:
            st.info(f"üìä Cache: {cache_stats['total_items']} itens")
        
        # Reports
        st.markdown("### üìÑ Relat√≥rios")
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìÑ PDF", use_container_width=True):
                if uploaded_files:
                    df = load_csv_data(uploaded_files)
                    if df is not None:
                        try:
                            with st.spinner("Gerando relat√≥rio PDF..."):
                                # Coletar dados de conversa√ß√£o se dispon√≠veis
                                conversation_data = {
                                    'messages': st.session_state.get('conversation', [])
                                }
                                
                                # Coletar dados de overview
                                overview_data = {
                                    'data_quality': (df.count().sum() / (len(df) * len(df.columns)) * 100),
                                    'numeric_columns': len(df.select_dtypes(include=[np.number]).columns),
                                    'categorical_columns': len(df.select_dtypes(include=['object']).columns),
                                    'insights': [
                                        f"Dataset com {len(df):,} registros e {len(df.columns)} colunas",
                                        f"Completude geral: {(df.count().sum() / (len(df) * len(df.columns)) * 100):.1f}%",
                                        f"Valores faltantes: {df.isnull().sum().sum()}",
                                        f"Duplicatas: {df.duplicated().sum()}"
                                    ]
                                }
                                
                                # Obter conclus√µes dos agentes CrewAI se dispon√≠veis
                                crewai_conclusions = None
                                try:
                                    available_analyses = data_manager.get_available_analyses()
                                    if available_analyses:
                                        # Usar a primeira an√°lise dispon√≠vel
                                        analysis_name = available_analyses[0]
                                        crewai_conclusions = data_manager.load_analysis(analysis_name)
                                        if not crewai_conclusions:
                                            st.warning("‚ö†Ô∏è Nenhuma conclus√£o de agente encontrada. Execute uma an√°lise CrewAI primeiro.")
                                    else:
                                        st.warning("‚ö†Ô∏è Nenhuma an√°lise CrewAI ativa. Execute uma an√°lise primeiro.")
                                except Exception as e:
                                    st.warning(f"N√£o foi poss√≠vel obter conclus√µes dos agentes: {e}")
                                
                                # Limpar nome do arquivo para evitar caracteres problem√°ticos
                                safe_filename = "".join(c for c in analysis_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
                                if not safe_filename:
                                    safe_filename = "relatorio_analise"
                                
                                pdf_data = generate_pdf_report(df, safe_filename, "", None, conversation_data, overview_data, crewai_conclusions)
                                st.download_button(
                                    "üì• Download PDF",
                                    pdf_data,
                                    file_name=f"{safe_filename}.pdf",
                                    mime="application/pdf"
                                )
                                st.success("‚úÖ Relat√≥rio PDF gerado com sucesso!")
                                
                                # Informa√ß√µes sobre o relat√≥rio
                                st.info(f"""
                                **üìÑ Relat√≥rio PDF Gerado:**
                                - **Arquivo:** {safe_filename}.pdf
                                - **Registros analisados:** {len(df):,}
                                - **Colunas:** {len(df.columns)}
                                - **Mensagens de conversa:** {len(conversation_data) if conversation_data else 0}
                                - **Conclus√µes dos agentes:** {len(crewai_conclusions) if crewai_conclusions else 0}
                                """)
                                
                                # Se√ß√£o de retorno √† an√°lise
                                st.markdown("---")
                                st.markdown("### üîÑ Navega√ß√£o")
                                col_return1, col_return2 = st.columns([1, 1])
                                
                                with col_return1:
                                    if st.button("üîÑ Retornar √† An√°lise", use_container_width=True, key="return_from_pdf"):
                                        st.rerun()
                                
                                with col_return2:
                                    if st.button("üìä Ver Overview", use_container_width=True, key="view_overview_from_pdf"):
                                        st.session_state['show_overview'] = True
                                        st.rerun()
                        except Exception as e:
                            st.error(f"Erro ao gerar PDF: {str(e)}")
                            st.error("Dica: Verifique se o arquivo CSV n√£o cont√©m caracteres especiais problem√°ticos.")
        
        with col2:
            if st.button("üìù Markdown", use_container_width=True):
                if uploaded_files:
                    df = load_csv_data(uploaded_files)
                    if df is not None:
                        try:
                            with st.spinner("Gerando relat√≥rio Markdown..."):
                                # Coletar dados de conversa√ß√£o se dispon√≠veis
                                conversation_data = {
                                    'messages': st.session_state.get('conversation', [])
                                }
                                
                                # Coletar dados de overview
                                overview_data = {
                                    'data_quality': (df.count().sum() / (len(df) * len(df.columns)) * 100),
                                    'numeric_columns': len(df.select_dtypes(include=[np.number]).columns),
                                    'categorical_columns': len(df.select_dtypes(include=['object']).columns),
                                    'insights': [
                                        f"Dataset com {len(df):,} registros e {len(df.columns)} colunas",
                                        f"Completude geral: {(df.count().sum() / (len(df) * len(df.columns)) * 100):.1f}%",
                                        f"Valores faltantes: {df.isnull().sum().sum()}",
                                        f"Duplicatas: {df.duplicated().sum()}"
                                    ]
                                }
                                
                                # Obter conclus√µes dos agentes CrewAI se dispon√≠veis
                                crewai_conclusions = None
                                try:
                                    available_analyses = data_manager.get_available_analyses()
                                    if available_analyses:
                                        # Usar a primeira an√°lise dispon√≠vel
                                        analysis_name = available_analyses[0]
                                        crewai_conclusions = data_manager.load_analysis(analysis_name)
                                        if not crewai_conclusions:
                                            st.warning("‚ö†Ô∏è Nenhuma conclus√£o de agente encontrada. Execute uma an√°lise CrewAI primeiro.")
                                    else:
                                        st.warning("‚ö†Ô∏è Nenhuma an√°lise CrewAI ativa. Execute uma an√°lise primeiro.")
                                except Exception as e:
                                    st.warning(f"N√£o foi poss√≠vel obter conclus√µes dos agentes: {e}")
                                
                                # Limpar nome do arquivo para evitar caracteres problem√°ticos
                                safe_filename = "".join(c for c in analysis_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
                                if not safe_filename:
                                    safe_filename = "relatorio_analise"
                                
                                markdown_data = generate_markdown_report(df, safe_filename, "", None, conversation_data, overview_data, crewai_conclusions)
                                st.download_button(
                                    "üì• Download Markdown",
                                    markdown_data,
                                    file_name=f"{safe_filename}.md",
                                    mime="text/markdown"
                                )
                                st.success("‚úÖ Relat√≥rio Markdown gerado com sucesso!")
                                
                                # Informa√ß√µes sobre o relat√≥rio
                                st.info(f"""
                                **üìù Relat√≥rio Markdown Gerado:**
                                - **Arquivo:** {safe_filename}.md
                                - **Registros analisados:** {len(df):,}
                                - **Colunas:** {len(df.columns)}
                                - **Mensagens de conversa:** {len(conversation_data) if conversation_data else 0}
                                - **Conclus√µes dos agentes:** {len(crewai_conclusions) if crewai_conclusions else 0}
                                """)
                                
                                # Se√ß√£o de retorno √† an√°lise
                                st.markdown("---")
                                st.markdown("### üîÑ Navega√ß√£o")
                                col_return1, col_return2 = st.columns([1, 1])
                                
                                with col_return1:
                                    if st.button("üîÑ Retornar √† An√°lise", use_container_width=True, key="return_from_markdown"):
                                        st.rerun()
                                
                                with col_return2:
                                    if st.button("üìä Ver Overview", use_container_width=True, key="view_overview_from_markdown"):
                                        st.session_state['show_overview'] = True
                                        st.rerun()
                        except Exception as e:
                            st.error(f"Erro ao gerar Markdown: {str(e)}")
                            st.error("Dica: Verifique se o arquivo CSV n√£o cont√©m caracteres especiais problem√°ticos.")
        
        return uploaded_files, api_provider, api_key, analysis_name

# =============================================================================
# FUN√á√ÉO PRINCIPAL
# =============================================================================

def main():
    # Header minimalista
    st.markdown("""
    <div class="header-container">
        <h1 class="header-title">ü§ñ CSV Analysis AI</h1>
        <p class="header-subtitle">An√°lise inteligente de dados com agentes de IA</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    uploaded_files, api_provider, api_key, analysis_name = show_sidebar()
    
    # Main content
    if uploaded_files:
        df = load_csv_data(uploaded_files)
        
        if df is not None:
            # Menu de navega√ß√£o principal
            selected = option_menu(
                menu_title=None,
                options=["üí¨ Chat IA", "üéØ Conclus√µes", "üìä Overview", "üìà Visualiza√ß√µes"],
                icons=["chat-dots", "target", "bar-chart", "chart-line"],
                menu_icon="cast",
                default_index=0,
                orientation="horizontal",
                styles={
                    "container": {"padding": "0!important", "background-color": "#f5f5f7"},
                    "icon": {"color": "#2C5F5D", "font-size": "18px"},
                    "nav-link": {
                        "font-size": "16px",
                        "text-align": "center",
                        "margin": "0px",
                        "--hover-color": "#E8F4F3",
                        "color": "#1d1d1f",
                        "font-weight": "500"
                    },
                    "nav-link-selected": {
                        "background-color": "#2C5F5D",
                        "color": "#ffffff",
                        "font-weight": "600"
                    },
                }
            )
            
            if selected == "üí¨ Chat IA":
                show_simple_chat_interface(df)
                    
            elif selected == "üéØ Conclus√µes":
                st.markdown("### üéØ Conclus√µes dos Agentes CrewAI")
                st.markdown('<hr class="chat-title-divider">', unsafe_allow_html=True)
                show_conclusions_interface()
                
            elif selected == "üìä Overview":
                st.markdown("### üìä Vis√£o Geral dos Dados")
                show_minimal_overview(df)
                
            elif selected == "üìà Visualiza√ß√µes":
                st.markdown("### üìà Visualiza√ß√µes Avan√ßadas")
                st.markdown('<hr class="chat-title-divider">', unsafe_allow_html=True)
                show_enhanced_visualizations(df)
                
    
    else:
        # Tela inicial
        st.markdown("""
        <div class="info-card">
            <h3>üéØ Bem-vindo ao CSV Analysis AI</h3>
            <p>Esta √© uma ferramenta de an√°lise de dados com intelig√™ncia artificial que permite:</p>
            <ul>
                <li>üí¨ <strong>Chat com Agentes IA:</strong> Fa√ßa perguntas sobre seus dados em linguagem natural</li>
                <li>üéØ <strong>Conclus√µes dos Agentes:</strong> Consulte insights e descobertas dos agentes CrewAI</li>
                <li>üìä <strong>Overview Inteligente:</strong> Visualiza√ß√£o clara e objetiva dos seus dados</li>
                <li>üìà <strong>Visualiza√ß√µes Avan√ßadas:</strong> Gr√°ficos e an√°lises visuais dos dados</li>
                <li>üìÑ <strong>Relat√≥rios Autom√°ticos:</strong> Gera√ß√£o de relat√≥rios em PDF e Markdown</li>
            </ul>
            <p><strong>Para come√ßar:</strong> Carregue um arquivo CSV na barra lateral e comece a conversar com nossos agentes de IA!</p>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
