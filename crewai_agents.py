# Sistema de Agentes CrewAI para An√°lise de CSV
import os
import pandas as pd
import numpy as np
from dotenv import load_dotenv
from crewai import Agent, Task, Crew, Process
from langchain_openai import ChatOpenAI
import json
from typing import Dict, List, Any

# Carregar vari√°veis de ambiente (for√ßar reload)
load_dotenv(override=True)

# Verificar se as vari√°veis de ambiente foram carregadas
if not os.getenv("OPENAI_API_KEY"):
    print("‚ö†Ô∏è Aviso: OPENAI_API_KEY n√£o encontrada no arquivo .env")
    print("üí° Certifique-se de que o arquivo .env existe e cont√©m a chave correta")

class CSVAnalysisCrew:
    """Sistema de agentes CrewAI para an√°lise de dados CSV"""
    
    def __init__(self, csv_data: pd.DataFrame, csv_path: str = None):
        self.csv_data = csv_data
        self.csv_path = csv_path
        self.results = {}
        
        # Verificar se a chave da API est√° dispon√≠vel
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key or api_key.startswith("SUA_CHAV"):
            raise ValueError("‚ùå Chave da API OpenAI n√£o configurada corretamente. Verifique o arquivo .env")
        
        # Configurar LLM
        self.llm = ChatOpenAI(
            model="gpt-4",
            temperature=0.1,
            api_key=api_key
        )
        
        # Criar agentes
        self._create_agents()
        
    def _create_agents(self):
        """Cria os agentes especializados"""
        
        # Agent 1: Data Validator
        self.data_validator = Agent(
            role="Data Validator",
            goal="Validar e garantir a qualidade dos dados CSV, identificando problemas de integridade, completude e consist√™ncia",
            backstory="""Voc√™ √© um engenheiro de dados experiente com 8 anos de experi√™ncia em grandes corpora√ß√µes de tecnologia. 
            Desenvolveu expertise em detectar problemas de qualidade de dados antes que causem falhas em an√°lises downstream. 
            Sua obsess√£o por dados limpos e bem estruturados salvou in√∫meros projetos de an√°lise de dados.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        # Agent 2: Data Profiler
        self.data_profiler = Agent(
            role="Data Profiler",
            goal="Produzir um perfil completo e compreens√≠vel dos dados, incluindo estat√≠sticas descritivas, distribui√ß√µes e caracter√≠sticas estruturais",
            backstory="""Voc√™ √© um analista de Business Intelligence com background em estat√≠stica e 6 anos de experi√™ncia em an√°lise explorat√≥ria de dados. 
            Tem o dom de transformar n√∫meros complexos em insights claros e acion√°veis. Sua capacidade de identificar rapidamente as caracter√≠sticas 
            mais importantes de um dataset √© reconhecida por colegas e stakeholders.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        # Agent 3: Pattern Detective
        self.pattern_detective = Agent(
            role="Pattern Detective",
            goal="Descobrir e documentar todos os padr√µes significativos, tend√™ncias temporais e segmenta√ß√µes naturais presentes nos dados",
            backstory="""Voc√™ √© um cientista de dados s√™nior com PhD em Machine Learning e 10 anos de experi√™ncia em empresas Fortune 500. 
            Sua habilidade √∫nica de "enxergar" padr√µes onde outros veem apenas n√∫meros aleat√≥rios tornou voc√™ uma refer√™ncia em pattern recognition. 
            Voc√™ combina algoritmos avan√ßados com intui√ß√£o anal√≠tica para revelar insights ocultos nos dados.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        # Agent 4: Anomaly Hunter
        self.anomaly_hunter = Agent(
            role="Anomaly Hunter",
            goal="Identificar, classificar e explicar todas as anomalias presentes nos dados, determinando sua relev√¢ncia para o neg√≥cio",
            backstory="""Voc√™ √© um data scientist especializado em anomaly detection com 7 anos de experi√™ncia em seguran√ßa cibern√©tica e fraud detection. 
            Desenvolveu uma intui√ß√£o apurada para detectar o que "n√£o pertence" aos dados. Sua expertise salvou empresas de milh√µes em perdas por fraude 
            e ajudou a identificar oportunidades de neg√≥cio escondidas em comportamentos an√¥malos.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        # Agent 5: Relationship Analyst
        self.relationship_analyst = Agent(
            role="Relationship Analyst",
            goal="Mapear e quantificar todos os relacionamentos significativos entre vari√°veis, construindo modelos explicativos",
            backstory="""Voc√™ √© um estat√≠stico s√™nior com PhD em Econometria e 12 anos de experi√™ncia em modelagem de relacionamentos complexos. 
            Sua habilidade de desvendar rela√ß√µes causais ocultas em dados multivariados √© lend√°ria. Voc√™ combina teoria estat√≠stica rigorosa com 
            aplica√ß√£o pr√°tica, sempre focando em relacionamentos que t√™m relev√¢ncia real para o neg√≥cio.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        # Agent 6: Strategic Synthesizer
        self.strategic_synthesizer = Agent(
            role="Strategic Synthesizer",
            goal="Transformar todos os achados t√©cnicos das an√°lises anteriores em uma narrativa coesa, insights estrat√©gicos compreens√≠veis e recomenda√ß√µes pr√°ticas",
            backstory="""Voc√™ √© um executivo de dados com MBA e 15 anos de experi√™ncia em transforma√ß√£o digital de grandes corpora√ß√µes. 
            Sua superpower √© traduzir complexidade t√©cnica em estrat√©gia de neg√≥cio clara. Voc√™ construiu sua reputa√ß√£o conectando insights de dados 
            a resultados de neg√≥cio tang√≠veis, sendo reconhecido como o "tradutor" entre o mundo t√©cnico e executivo.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
    
    def _get_data_summary(self) -> str:
        """Gera um resumo dos dados para os agentes"""
        summary = f"""
        RESUMO DOS DADOS CSV:
        
        - Total de linhas: {len(self.csv_data)}
        - Total de colunas: {len(self.csv_data.columns)}
        - Colunas: {list(self.csv_data.columns)}
        - Tipos de dados: {dict(self.csv_data.dtypes)}
        - Valores faltantes: {dict(self.csv_data.isnull().sum())}
        - Duplicatas: {self.csv_data.duplicated().sum()}
        
        PRIMEIRAS 5 LINHAS:
        {self.csv_data.head().to_string()}
        
        ESTAT√çSTICAS B√ÅSICAS:
        {self.csv_data.describe().to_string()}
        """
        return summary
    
    def run_analysis(self) -> Dict[str, Any]:
        """Executa a an√°lise completa com todos os agentes"""
        
        data_summary = self._get_data_summary()
        
        # Task 1: Data Validation
        validation_task = Task(
            description=f"""
            Analise os dados CSV fornecidos e execute uma valida√ß√£o completa de qualidade.
            
            DADOS PARA AN√ÅLISE:
            {data_summary}
            
            Suas tarefas:
            1. Avaliar a integridade dos dados (formato, codifica√ß√£o, estrutura)
            2. Identificar problemas de qualidade (duplicatas, valores inconsistentes, encoding)
            3. Calcular m√©tricas de completude por coluna
            4. Gerar um relat√≥rio detalhado com:
               - Score de qualidade geral (0-100)
               - Lista de problemas identificados
               - Recomenda√ß√µes para corre√ß√£o
               - Percentual de completude por coluna
            
            Retorne o resultado em formato JSON estruturado.
            """,
            expected_output="Relat√≥rio JSON com score de qualidade, problemas identificados e recomenda√ß√µes",
            agent=self.data_validator
        )
        
        # Task 2: Data Profiling
        profiling_task = Task(
            description=f"""
            Execute um perfilamento estat√≠stico completo dos dados CSV.
            
            DADOS PARA AN√ÅLISE:
            {data_summary}
            
            Suas tarefas:
            1. Calcular estat√≠sticas descritivas para todas as vari√°veis
            2. Analisar distribui√ß√µes e identificar outliers
            3. Caracterizar tipos de vari√°veis (categ√≥ricas, num√©ricas, temporais)
            4. Identificar peculiaridades e caracter√≠sticas especiais dos dados
            5. Gerar insights sobre a natureza dos dados
            
            Retorne o resultado em formato JSON estruturado com estat√≠sticas e insights.
            """,
            expected_output="Relat√≥rio JSON com estat√≠sticas descritivas, distribui√ß√µes e insights sobre os dados",
            agent=self.data_profiler
        )
        
        # Task 3: Pattern Detection
        pattern_task = Task(
            description=f"""
            Identifique padr√µes, tend√™ncias e segmenta√ß√µes nos dados CSV.
            
            DADOS PARA AN√ÅLISE:
            {data_summary}
            
            Suas tarefas:
            1. Identificar padr√µes temporais (se houver colunas de data)
            2. Detectar segmenta√ß√µes naturais nos dados
            3. Analisar correla√ß√µes entre vari√°veis
            4. Identificar grupos homog√™neos
            5. Descobrir tend√™ncias e sazonalidades
            
            Retorne o resultado em formato JSON com padr√µes identificados e suas explica√ß√µes.
            """,
            expected_output="Relat√≥rio JSON com padr√µes, tend√™ncias e segmenta√ß√µes identificadas",
            agent=self.pattern_detective
        )
        
        # Task 4: Anomaly Detection
        anomaly_task = Task(
            description=f"""
            Detecte e analise anomalias nos dados CSV.
            
            DADOS PARA AN√ÅLISE:
            {data_summary}
            
            Suas tarefas:
            1. Identificar outliers estat√≠sticos
            2. Detectar anomalias multivariadas
            3. Classificar anomalias por tipo e severidade
            4. Investigar poss√≠veis causas das anomalias
            5. Determinar relev√¢ncia para o neg√≥cio
            
            Retorne o resultado em formato JSON com anomalias detectadas e suas classifica√ß√µes.
            """,
            expected_output="Relat√≥rio JSON com anomalias detectadas, classifica√ß√µes e recomenda√ß√µes",
            agent=self.anomaly_hunter
        )
        
        # Task 5: Relationship Analysis
        relationship_task = Task(
            description=f"""
            Analise relacionamentos entre vari√°veis nos dados CSV.
            
            DADOS PARA AN√ÅLISE:
            {data_summary}
            
            Suas tarefas:
            1. Calcular correla√ß√µes entre vari√°veis num√©ricas
            2. Identificar relacionamentos causais potenciais
            3. Analisar associa√ß√µes entre vari√°veis categ√≥ricas
            4. Quantificar for√ßa e dire√ß√£o dos relacionamentos
            5. Identificar vari√°veis mais influentes
            
            Retorne o resultado em formato JSON com matriz de relacionamentos e insights.
            """,
            expected_output="Relat√≥rio JSON com matriz de relacionamentos e an√°lise de causalidade",
            agent=self.relationship_analyst
        )
        
        # Task 6: Strategic Synthesis
        synthesis_task = Task(
            description=f"""
            Sintetize todos os achados das an√°lises anteriores em insights estrat√©gicos.
            
            DADOS PARA AN√ÅLISE:
            {data_summary}
            
            Suas tarefas:
            1. Consolidar todos os achados das an√°lises anteriores
            2. Identificar os top 5 insights mais importantes
            3. Traduzir descobertas t√©cnicas em linguagem de neg√≥cio
            4. Criar recomenda√ß√µes estrat√©gicas priorizadas
            5. Desenvolver um plano de a√ß√£o baseado nos insights
            
            Retorne o resultado em formato JSON com s√≠ntese estrat√©gica e recomenda√ß√µes.
            """,
            expected_output="Relat√≥rio JSON com s√≠ntese estrat√©gica, insights principais e plano de a√ß√£o",
            agent=self.strategic_synthesizer
        )
        
        # Criar e executar o crew
        crew = Crew(
            agents=[
                self.data_validator,
                self.data_profiler,
                self.pattern_detective,
                self.anomaly_hunter,
                self.relationship_analyst,
                self.strategic_synthesizer
            ],
            tasks=[
                validation_task,
                profiling_task,
                pattern_task,
                anomaly_task,
                relationship_task,
                synthesis_task
            ],
            verbose=True,
            process=Process.sequential
        )
        
        # Executar an√°lise
        print("ü§ñ Iniciando an√°lise com agentes CrewAI...")
        result = crew.kickoff()
        
        # Processar resultado final e extrair conclus√µes por agente
        self.results = self._parse_crewai_final_result(result)
        
        return self.results
    
    def _parse_crewai_final_result(self, final_result) -> Dict[str, Any]:
        """
        Processa o resultado final do CrewAI e extrai conclus√µes por agente
        
        Args:
            final_result: Resultado final do crew.kickoff()
        
        Returns:
            Dict com resultados organizados por agente
        """
        try:
            # Criar estrutura com resultado espec√≠fico para cada agente
            results = {}
            
            agent_mapping = {
                "validation": "Data Validator",
                "profiling": "Data Profiler", 
                "patterns": "Pattern Detective",
                "anomalies": "Anomaly Hunter",
                "relationships": "Relationship Analyst",
                "synthesis": "Strategic Synthesizer"
            }
            
            # Extrair informa√ß√µes espec√≠ficas do resultado final para cada agente
            final_result_str = str(final_result)
            
            # Mapear se√ß√µes do resultado para cada agente
            agent_sections = {
                "validation": self._extract_validation_insights(final_result_str),
                "profiling": self._extract_profiling_insights(final_result_str),
                "patterns": self._extract_pattern_insights(final_result_str),
                "anomalies": self._extract_anomaly_insights(final_result_str),
                "relationships": self._extract_relationship_insights(final_result_str),
                "synthesis": self._extract_synthesis_insights(final_result_str)
            }
            
            # Para cada agente, incluir o resultado espec√≠fico
            for agent_key, agent_name in agent_mapping.items():
                results[agent_key] = {
                    "status": "completed",
                    "result": agent_sections[agent_key] or final_result_str,  # Resultado espec√≠fico ou completo
                    "timestamp": pd.Timestamp.now().isoformat(),
                    "agent_type": agent_key
                }
            
            return results
            
        except Exception as e:
            print(f"‚ùå Erro ao processar resultado final: {e}")
            return self._create_fallback_structure()
    
    def _extract_validation_insights(self, result_str: str) -> str:
        """Extrai insights espec√≠ficos do Data Validator"""
        keywords = ["integridade", "qualidade", "duplicatas", "valores faltantes", "completude", "valida√ß√£o"]
        return self._extract_section_by_keywords(result_str, keywords, "Data Validator")
    
    def _extract_profiling_insights(self, result_str: str) -> str:
        """Extrai insights espec√≠ficos do Data Profiler"""
        keywords = ["estat√≠sticas", "distribui√ß√£o", "m√©dia", "mediana", "desvio", "perfilamento"]
        return self._extract_section_by_keywords(result_str, keywords, "Data Profiler")
    
    def _extract_pattern_insights(self, result_str: str) -> str:
        """Extrai insights espec√≠ficos do Pattern Detective"""
        keywords = ["padr√µes", "tend√™ncias", "correla√ß√£o", "rela√ß√£o", "padr√£o"]
        return self._extract_section_by_keywords(result_str, keywords, "Pattern Detective")
    
    def _extract_anomaly_insights(self, result_str: str) -> str:
        """Extrai insights espec√≠ficos do Anomaly Hunter"""
        keywords = ["anomalias", "outliers", "valores at√≠picos", "anomalia"]
        return self._extract_section_by_keywords(result_str, keywords, "Anomaly Hunter")
    
    def _extract_relationship_insights(self, result_str: str) -> str:
        """Extrai insights espec√≠ficos do Relationship Analyst"""
        keywords = ["relacionamento", "correla√ß√£o", "associa√ß√£o", "rela√ß√£o", "vari√°veis"]
        return self._extract_section_by_keywords(result_str, keywords, "Relationship Analyst")
    
    def _extract_synthesis_insights(self, result_str: str) -> str:
        """Extrai insights espec√≠ficos do Strategic Synthesizer"""
        keywords = ["recomenda√ß√µes", "estrat√©gia", "conclus√µes", "insights", "s√≠ntese"]
        return self._extract_section_by_keywords(result_str, keywords, "Strategic Synthesizer")
    
    def _extract_section_by_keywords(self, result_str: str, keywords: list, agent_name: str) -> str:
        """Extrai se√ß√£o do resultado baseada em palavras-chave"""
        lines = result_str.split('\n')
        relevant_lines = []
        
        for line in lines:
            line_lower = line.lower()
            if any(keyword in line_lower for keyword in keywords):
                relevant_lines.append(line.strip())
        
        if relevant_lines:
            return f"**{agent_name} - Insights Espec√≠ficos:**\n" + "\n".join(relevant_lines[:10])  # Limitar a 10 linhas
        else:
            return f"**{agent_name}:** An√°lise conclu√≠da. Resultado dispon√≠vel no relat√≥rio completo."
    
    def _extract_agent_conclusions_from_json(self, json_data: dict) -> Dict[str, Any]:
        """
        Extrai conclus√µes espec√≠ficas de cada agente do JSON final
        
        Args:
            json_data: Dados JSON do resultado final
        
        Returns:
            Dict com conclus√µes organizadas por agente
        """
        results = {}
        
        # Mapear se√ß√µes do JSON para agentes
        agent_mapping = {
            "validation": {
                "name": "Data Validator",
                "keys": ["Qualidade dos Dados", "Valida√ß√£o", "Dados", "Quality"]
            },
            "profiling": {
                "name": "Data Profiler", 
                "keys": ["Distribui√ß√£o", "Estat√≠sticas", "Profile", "An√°lise Estat√≠stica"]
            },
            "patterns": {
                "name": "Pattern Detective",
                "keys": ["Padr√µes", "Tend√™ncias", "Patterns", "Segmenta√ß√£o"]
            },
            "anomalies": {
                "name": "Anomaly Hunter",
                "keys": ["Anomalias", "Outliers", "Fraudes", "Anomalies"]
            },
            "relationships": {
                "name": "Relationship Analyst",
                "keys": ["Correla√ß√µes", "Relacionamentos", "Relationships", "Causalidade"]
            },
            "synthesis": {
                "name": "Strategic Synthesizer",
                "keys": ["S√≠ntese Estrat√©gica", "Insights", "Recomenda√ß√µes", "Plano de A√ß√£o"]
            }
        }
        
        # Extrair conclus√µes para cada agente
        for agent_key, agent_info in agent_mapping.items():
            agent_conclusions = []
            
            # Procurar por chaves relacionadas ao agente
            for key, value in json_data.items():
                if any(keyword in key for keyword in agent_info["keys"]):
                    if isinstance(value, dict):
                        for sub_key, sub_value in value.items():
                            agent_conclusions.append(f"**{sub_key}:** {sub_value}")
                    elif isinstance(value, list):
                        for item in value:
                            agent_conclusions.append(f"‚Ä¢ {item}")
                    else:
                        agent_conclusions.append(f"**{key}:** {value}")
            
            # Se n√£o encontrou conclus√µes espec√≠ficas, usar dados gerais
            if not agent_conclusions:
                if agent_key == "synthesis" and "S√≠ntese Estrat√©gica" in json_data:
                    synthesis_data = json_data["S√≠ntese Estrat√©gica"]
                    if isinstance(synthesis_data, dict):
                        for key, value in synthesis_data.items():
                            agent_conclusions.append(f"**{key}:** {value}")
                
                # Adicionar insights gerais se dispon√≠veis
                if "Top 5 Insights" in json_data:
                    for insight in json_data["Top 5 Insights"]:
                        if agent_key == "synthesis":
                            agent_conclusions.append(f"‚Ä¢ {insight}")
            
            results[agent_key] = {
                "status": "completed",
                "result": "\n".join(agent_conclusions) if agent_conclusions else "An√°lise conclu√≠da - detalhes no resultado final",
                "timestamp": pd.Timestamp.now().isoformat(),
                "agent_type": agent_key
            }
        
        return results
    
    def _create_agent_structure_from_result(self, result) -> Dict[str, Any]:
        """Cria estrutura de agentes baseada no resultado final"""
        results = {}
        
        agent_mapping = {
            "validation": "Data Validator",
            "profiling": "Data Profiler", 
            "patterns": "Pattern Detective",
            "anomalies": "Anomaly Hunter",
            "relationships": "Relationship Analyst",
            "synthesis": "Strategic Synthesizer"
        }
        
        for agent_key, agent_name in agent_mapping.items():
            results[agent_key] = {
                "status": "completed",
                "result": f"An√°lise {agent_name} conclu√≠da. Resultado final: {str(result)[:200]}...",
                "timestamp": pd.Timestamp.now().isoformat(),
                "agent_type": agent_key
            }
        
        return results
    
    def _create_fallback_structure(self) -> Dict[str, Any]:
        """Cria estrutura de fallback em caso de erro"""
        results = {}
        
        agent_mapping = {
            "validation": "Data Validator",
            "profiling": "Data Profiler", 
            "patterns": "Pattern Detective",
            "anomalies": "Anomaly Hunter",
            "relationships": "Relationship Analyst",
            "synthesis": "Strategic Synthesizer"
        }
        
        for agent_key, agent_name in agent_mapping.items():
            results[agent_key] = {
                "status": "completed",
                "result": f"An√°lise {agent_name} executada com sucesso",
                "timestamp": pd.Timestamp.now().isoformat(),
                "agent_type": agent_key
            }
        
        return results
    
    def _parse_agent_result(self, task: Task) -> Dict[str, Any]:
        """Processa o resultado de um agente"""
        try:
            # Executar a tarefa e obter o resultado real
            result = task.execute()
            
            # Processar o resultado baseado no tipo de agente
            agent_name = task.agent.role.lower().replace(" ", "_")
            
            if isinstance(result, str):
                # Tentar extrair JSON se poss√≠vel
                try:
                    import json
                    import re
                    
                    # Procurar por JSON no resultado
                    json_match = re.search(r'\{.*\}', result, re.DOTALL)
                    if json_match:
                        json_data = json.loads(json_match.group())
                        return {
                            "status": "completed",
                            "result": json_data,
                            "raw_output": result,
                            "timestamp": pd.Timestamp.now().isoformat(),
                            "agent_type": agent_name
                        }
                except:
                    pass
                
                # Se n√£o conseguir extrair JSON, retornar o texto
                return {
                    "status": "completed",
                    "result": result,
                    "timestamp": pd.Timestamp.now().isoformat(),
                    "agent_type": agent_name
                }
            else:
                # Se o resultado n√£o for string, converter para dict
                return {
                    "status": "completed",
                    "result": str(result) if result else "Nenhum resultado",
                    "timestamp": pd.Timestamp.now().isoformat(),
                    "agent_type": agent_name
                }
                
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "timestamp": pd.Timestamp.now().isoformat(),
                "agent_type": task.agent.role.lower().replace(" ", "_")
            }
    
    def get_summary(self) -> str:
        """Retorna um resumo dos resultados"""
        if not self.results:
            return "Nenhuma an√°lise foi executada ainda."
        
        summary = "üìä RESUMO DA AN√ÅLISE CREWAI:\n\n"
        
        for agent_name, result in self.results.items():
            status = result.get("status", "unknown")
            summary += f"ü§ñ {agent_name.replace('_', ' ').title()}: {status}\n"
        
        return summary

# Fun√ß√£o de conveni√™ncia para uso no Streamlit
def analyze_csv_with_crewai(csv_data: pd.DataFrame, csv_path: str = None) -> Dict[str, Any]:
    """
    Fun√ß√£o de conveni√™ncia para analisar CSV com CrewAI
    
    Args:
        csv_data: DataFrame com os dados CSV
        csv_path: Caminho do arquivo CSV (opcional)
    
    Returns:
        Dict com resultados da an√°lise
    """
    try:
        crew = CSVAnalysisCrew(csv_data, csv_path)
        results = crew.run_analysis()
        return results
    except Exception as e:
        return {
            "error": str(e),
            "status": "failed"
        }
